№1
1.	Даны два массива: А[M] и B[N] (M и N вводятся с клавиатуры).
 Необходимо создать третий массив минимально возможного раз-мера,
 в котором нужно собрать общие элементы двух массивов без повторений.
#include <iostream>

int main() {
    int M, N;

    // Ввод размеров массивов
    std::cout << "Введите размер массива А: ";
    std::cin >> M;
    std::cout << "Введите размер массива B: ";
    std::cin >> N;

    // Создание массивов А и B
    int* A = new int[M];
    int* B = new int[N];

    // Ввод элементов массива M
    std::cout << "Введите элементы массива A:" << std::endl;
    for (int i = 0; i < M; i++) {
        std::cin >> A[i];
    }

    // Ввод элементов массива N
    std::cout << "Введите элементы массива B:" << std::endl;
    for (int i = 0; i < N; i++) {
        std::cin >> B[i];
    }

    // Создание массива C для общих элементов
    int* C = new int[M > N ? M : N];  // Максимальный размер массива C равен максимальному из M и N

    int k = 0; // Индекс для массива C

    // Поиск общих элементов и их добавление в массив C без повторений
    for (int i = 0; i < M; i++) {
        for (int j = 0; j < N; j++) {
            if (A[i] == B[j]) {
                bool isDuplicate = false;
                // Проверка на дубликаты в массиве C
                for (int m = 0; m < k; m++) {
                    if (C[m] == A[i]) {
                        isDuplicate = true;
                        break;
                    }
                }
                if (!isDuplicate) {
                    C[k] = A[i];
                    k++;
                }
                break;
            }
        }
    }

    // Вывод общих элементов
    std::cout << "Общие элементы массивов A и B без повторений:" << std::endl;
    for (int i = 0; i < k; i++) {
        std::cout << C[i] << " ";
    }
    std::cout << std::endl;

    // Освобождение выделенной памяти
    delete[] A;
    delete[] B;
    delete[] C;

    return 0;
}



№2

2.	Даны два массива: А[M] и B[N] (M и N вводятся с клавиатуры).
 Необходимо создать третий массив минимально возможного раз-мера, в котором нужно собрать элементы массива A,
 которые не включаются в массив B, без повторений.

#include <iostream>

int main() {
    int M, N;

    // Ввод размеров массивов
    std::cout << "Введите размер массива A: ";
    std::cin >> M;
    std::cout << "Введите размер массива B: ";
    std::cin >> N;

    // Создание массивов A и B
    int* A = new int[M];
    int* B = new int[N];

    // Ввод элементов массива A
    std::cout << "Введите элементы массива A:" << std::endl;
    for (int i = 0; i < M; i++) {
        std::cin >> A[i];
    }

    // Ввод элементов массива B
    std::cout << "Введите элементы массива B:" << std::endl;
    for (int i = 0; i < N; i++) {
        std::cin >> B[i];
    }

    // Создание массива C для элементов из A, которые не включаются в B
    int* C = new int[M];  // Максимальный размер массива C равен размеру массива A

    int k = 0; // Индекс для массива C

    // Поиск элементов из A, которые не включаются в B
    for (int i = 0; i < M; i++) {
        bool isNotInB = true;
        for (int j = 0; j < N; j++) {
            if (A[i] == B[j]) {
                isNotInB = false;
                break;
            }
        }
        if (isNotInB) {
            bool isDuplicate = false;
            // Проверка на дубликаты в массиве C
            for (int m = 0; m < k; m++) {
                if (C[m] == A[i]) {
                    isDuplicate = true;
                    break;
                }
            }
            if (!isDuplicate) {
                C[k] = A[i];
                k++;
            }
        }
    }

    // Вывод элементов из A, которые не включаются в B
    std::cout << "Элементы массива A, которые не включаются в B без повторений:" << std::endl;
    for (int i = 0; i < k; i++) {
        std::cout << C[i] << " ";
    }
    std::cout << std::endl;

    // Освобождение выделенной памяти
    delete[] A;
    delete[] B;
    delete[] C;

    return 0;
}



№3

3.	Даны два массива: А[M] и B[N] (M и N вводятся с клавиатуры).
 Необходимо создать третий массив минимально возможного раз-мера, в котором нужно собрать элементы массивов A и B,
 которые не являются общими для них, без повторений.

#include <iostream>

// Функция для проверки, содержится ли элемент в массиве
bool contains(int* arr, int size, int value) {
    for (int i = 0; i < size; i++) {
        if (arr[i] == value) {
            return true;
        }
    }
    return false;
}

int main() {
    int M, N;

    // Ввод размеров массивов
    std::cout << "Введите размер массива A: ";
    std::cin >> M;
    std::cout << "Введите размер массива B: ";
    std::cin >> N;

    // Создание массивов A и B
    int* A = new int[M];
    int* B = new int[N];

    // Ввод элементов массива A
    std::cout << "Введите элементы массива A:" << std::endl;
    for (int i = 0; i < M; i++) {
        std::cin >> A[i];
    }

    // Ввод элементов массива B
    std::cout << "Введите элементы массива B:" << std::endl;
    for (int i = 0; i < N; i++) {
        std::cin >> B[i];
    }

    // Вычисление размера массива C (максимальный из M и N)
    int sizeC = (M > N) ? M : N;
    int* C = new int[sizeC]; // Создание массива C

    int k = 0; // Индекс для массива C

    // Заполнение массива C элементами из массива A, которые не включаются в B
    for (int i = 0; i < M; i++) {
        if (!contains(B, N, A[i])) {
            if (!contains(C, k, A[i])) {
                C[k++] = A[i];
            }
        }
    }

    // Заполнение массива C элементами из массива B, которые не включаются в A
    for (int i = 0; i < N; i++) {
        if (!contains(A, M, B[i])) {
            if (!contains(C, k, B[i])) {
                C[k++] = B[i];
            }
        }
    }

    // Вывод элементов массива C
    std::cout << "Элементы массивов A и B, которые не являются общими, без повторений:" << std::endl;
    for (int i = 0; i < k; i++) {
        std::cout << C[i] << " ";
    }
    std::cout << std::endl;

    // Освобождение выделенной памяти
    delete[] A;
    delete[] B;
    delete[] C;

    return 0;
}


№4

4.	Создать функцию, позволяющую добавлять блок элементов в ко-нец массива.

#include <iostream>

// Функция для добавления блока элементов в конец массива
void appendToDynamicArray(int*& array, int& currentSize, int& maxSize, const int* block, int blockSize) {
    if (currentSize + blockSize > maxSize) {
        // Расширение массива, если текущий размер больше максимального
        maxSize = currentSize + blockSize;
        int* newArray = new int[maxSize];

        // Копирование существующих элементов в новый массив
        for (int i = 0; i < currentSize; i++) {
            newArray[i] = array[i];
        }

        // Освобождение памяти, занимаемой старым массивом
        delete[] array;

        // Указываем на новый массив
        array = newArray;
    }

    // Добавление блока элементов в конец массива
    for (int i = 0; i < blockSize; i++) {
        array[currentSize++] = block[i];
    }
}

int main() {
    int* dynamicArray = nullptr; // Динамический массив
    int currentSize = 0; // Текущий размер массива
    int maxSize = 0; // Максимальный размер массива (в начале пустой)

    // Пример блока элементов для добавления
    int block[] = {10, 20, 30, 40};
    int blockSize = sizeof(block) / sizeof(block[0]);

    // Вызов функции для добавления блока в конец массива
    appendToDynamicArray(dynamicArray, currentSize, maxSize, block, blockSize);

    // Вывод элементов массива после добавления
    std::cout << "Массив после добавления блока:" << std::endl;
    for (int i = 0; i < currentSize; i++) {
        std::cout << dynamicArray[i] << " ";
    }
    std::cout << std::endl;

    // Освобождение памяти, занимаемой динамическим массивом
    delete[] dynamicArray;

    return 0;
}

№7

7.	Написать функцию, которая получает указатель на динамический массив и его размер. 
Функция должна удалить из массива все простые числа и вернуть указатель на новый динамический мас-сив.

#include <iostream>
#include <cmath>

// Функция для проверки, является ли число простым
bool isPrime(int number) {
    if (number <= 1) {
        return false;
    }
    if (number <= 3) {
        return true;
    }
    if (number % 2 == 0 || number % 3 == 0) {
        return false;
    }
    for (int i = 5; i * i <= number; i += 6) {
        if (number % i == 0 || number % (i + 2) == 0) {
            return false;
        }
    }
    return true;
}

// Функция для удаления простых чисел из динамического массива
int* removePrimes(int* array, int& size) {
    // Создание нового динамического массива без простых чисел
    int* newArray = new int[size];
    int newSize = 0;

    // Копирование элементов из исходного массива в новый массив, исключая простые числа
    for (int i = 0; i < size; i++) {
        if (!isPrime(array[i])) {
            newArray[newSize++] = array[i];
        }
    }

    // Освобождение памяти, занимаемой исходным массивом
    delete[] array;

    // Обновление размера исходного массива и возврат нового массива
    size = newSize;
    return newArray;
}

int main() {
    int size;
    std::cout << "Введите размер динамического массива: ";
    std::cin >> size;

    // Создание и ввод элементов динамического массива
    int* dynamicArray = new int[size];
    std::cout << "Введите элементы массива:" << std::endl;
    for (int i = 0; i < size; i++) {
        std::cin >> dynamicArray[i];
    }

    // Вызов функции для удаления простых чисел из массива
    dynamicArray = removePrimes(dynamicArray, size);

    // Вывод элементов массива после удаления простых чисел
    std::cout << "Массив после удаления простых чисел:" << std::endl;
    for (int i = 0; i < size; i++) {
        std::cout << dynamicArray[i] << " ";
    }
    std::cout << std::endl;

    // Освобождение памяти, занимаемой динамическим массивом
    delete[] dynamicArray;

    return 0;
}
